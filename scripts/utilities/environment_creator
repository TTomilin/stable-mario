import argparse
import pathlib

import numpy as np
import json

from gymnasium.wrappers import ResizeObservation, NormalizeObservation, RecordVideo, FrameStack, NormalizeReward, TimeLimit
from stable_baselines3.common.atari_wrappers import ClipRewardEnv, MaxAndSkipEnv

import stable_retro
from config import CONFIG
import stable_retro.data
from stable_retro.examples.discretizer import Discretizer
from wrappers.observation import Rescale, ShowObservation, CenterCrop
from wrappers.logger import LogVariance, LogRewardSummary


class RetroEnvCreator:
    @staticmethod
    def init_env(cfg: argparse.Namespace, log_dir: str):
        game = cfg.game
        state = cfg.load_state if cfg.load_state is not None else CONFIG[game]["state"]
        env = stable_retro.make(game=CONFIG[game]['game_env'], state=state, render_mode=cfg.render_mode)

        rom_path = stable_retro.data.get_romfile_path(game, stable_retro.data.Integrations.DEFAULT)
        rom_system = stable_retro.get_romfile_system(rom_path)
        emu_info = stable_retro.get_system_info(rom_system)


        if cfg.discretize:
            env = Discretizer(env, CONFIG[game]["actions"])
        if cfg.crop:
            dim = np.array([int(num_str) for num_str in cfg.crop_dimension.split("x")])
            env = CenterCrop(env, dim=dim)
        if cfg.resize_observation:
            env = ResizeObservation(env, CONFIG[game]["resize"])
        if cfg.rescale:
            env = Rescale(env)
        if cfg.normalize_observation:
            env = NormalizeObservation(env)
        if cfg.normalize_reward:
            env = NormalizeReward(env)    
        if cfg.show_observation:
            env = ShowObservation(env)
        if cfg.skip_frames:
            env = MaxAndSkipEnv(env, skip=cfg.n_skip_frames * emu_info["steps_per_frame"])
        if cfg.stack_frames:
            env = FrameStack(env, cfg.n_stack_frames)
        if CONFIG[game]["clip_reward"]:
            env = ClipRewardEnv(env)
        if cfg.record:
            video_folder = f"{log_dir}/videos"
            env = RecordVideo(env=env, video_folder=video_folder, episode_trigger=lambda x: x % cfg.record_every == 0)
        if cfg.time_limit != None:
            env = TimeLimit(env=env, max_episode_steps=cfg.time_limit * emu_info["steps_per_frame"] * emu_info["framerate"])
        if cfg.log_variance and cfg.with_wandb:
            env = LogVariance(env, cfg.variance_log_frequency)
        if cfg.log_reward_summary and cfg.with_wandb:
            env = LogRewardSummary(env, cfg.log_reward_summary_frequency)

        return env

    def get_system_properties(system: str):
        core_directory = pathlib.Path(stable_retro.__path__) / 'cores'
        json_files = [file for file in core_directory.glob('*') if file.name.endswith('.json')]
        for json_file in json_files:
            if system == json_file.stem:
                with open(json_file, 'r') as f:
                    return json.load(f)

